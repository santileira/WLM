<?xml version="1.0" encoding="UTF-8"?>
<krpano version="1.18.3">

    
  <!-- Spot Style - Hotspot Chico -->
  <style name="IconHotspotChico"
         url="%FIRSTXML%/spots/hotspot_circulo_chico_morena_mobile_user_defaultpoint1.png"
         visible="false"
         onhover="onhoverIconHotspotChico"
         onout="onoutIconHotspotChico"
         />
  <action name="onhoverIconHotspotChico">
    showtooltip('hotspot');
  </action>
  <action name="onoutIconHotspotChico">
    hideTooltip();



  </action>



	<!-- ************** -->
	<!-- Thumbnails Bar -->
	<!-- ************** -->





<layer name="thumbnailsBar-thumbnailsBar" 
	keep="true" 
	type="container" 
	visible="false"
	align="bottom" 
	
		width="100%" 
		height="0" 
		accuracy="1"
	
	x="0"
	y="0"
	
	bgcolor="0xdedede"
	bgalpha="0"
	
	zorder="0"
/>



<layer name="thumbnailBorderSource-thumbnailsBar"
	keep="true"
	visible="false"
	
	borderWidth="2"
	borderColorDefault="0xe6e6e6" 
	borderColorHover="0xffffff"
	borderColorSelected="0xffffff"
	borderAlphaDefault="0.300007629510948" 
	borderAlphaHover="1"
	borderAlphaSelected="1"
	
	url=""
	offsetX="0"
	offsetY="0"
	quarterHeight="0"
/>

	
	<krpano arrow1Loaded-thumbnailsBar="false" arrow2Loaded-thumbnailsBar="false" borderLoaded-thumbnailsBar="false" thumbnailsLoadedCounter-thumbnailsBar="0" thumbsCount-thumbnailsBar="0" thumbsCounter-thumbnailsBar="0" firstInit-thumbnailsBar="false" />
	
	
	<events name="thumbnailsScrollEvents-thumbnailsBar" 
		keep="true" 
		
		onxmlcomplete="ifnot(startResize-thumbnailsBar,set(isLoaded-thumbnailsBar, true);if(isStarted-thumbnailsBar,onLoadCompleteHandler-thumbnailsBar();););"
		onTourStart="set(isStarted-thumbnailsBar, true);if(isLoaded-thumbnailsBar,onLoadCompleteHandler-thumbnailsBar(););"
		onnewpano="if(startResize-thumbnailsBar,if(firstInit-thumbnailsBar,onLoadCompleteHandler-thumbnailsBar();););"
		onresize="onResizeHandler-thumbnailsBar();"
		hidetourthumbnails="hideWithThumbnailsButton-thumbnailsBar();" 
		showtourthumbnails="showWithThumbnailsButton-thumbnailsBar();" 
		hidetourcontrols="hideWithControlsBar-thumbnailsBar();" 
		showtourcontrols="showWithControlsBar-thumbnailsBar();" 
		onenterfullscreen="delayedcall(0.2,scrollToCurrentThumb-thumbnailsBar(););"
		onexitfullscreen="delayedcall(0.2,scrollToCurrentThumb-thumbnailsBar(););"
	/>
	
	
	<layer name="scrollAreaContainer-thumbnailsBar" 
		keep="true"
		type="container" 
		align="topleft"
		x="10"
		y="10"
		
		marginX="10"
		marginY="10"
		
		width="0" 
		height="0"
		
		scrollSpeedInit="10"
		scrollSpeed="10"
		scrollSpeedMax="70"
		scrollSpeedAcceleration="20"
		
		parent="thumbnailsBar-thumbnailsBar"
		
		thumbWidth="0"
		thumbHeight="0"
		
		itemWidth="270"
		itemHeight="135"
		
		offsetX="0"
		offsetY="0"
		
		thumbSpacer="10"
		currentThumbsCount="0"
		
		adjustToContent="true"
		
		zorder="1"
		visible="false"
		ready="false"
	>
	
		
		<layer name="thumbsScrollArea-thumbnailsBar" 
			url="%FIRSTXML%/graphics/scrollarea.swf" 
			alturl="%FIRSTXML%/graphics/scrollarea.js" 
			align="bottom"
			onhover_autoscrolling="false"
			
			x="0"
			y="0"
			 
				direction="h" 
		/>
	
	</layer>
	
	
	
	<layer name="scrollPrevArrow-thumbnailsBar" 
		keep="true"
		type="image"
		visible="false"
		parent="thumbnailsBar-thumbnailsBar"
		targetHeight="0"
		tagertWidth="0"
		zorder="2"
		onloaded="loadedImages-thumbnailsBar(arrow1);"
			url="%FIRSTXML%/graphics/thumbnailsbar/btn_scroll_left.png"
			align="left"
	/>
	
	
	
	<layer name="scrollNextArrow-thumbnailsBar" 
		keep="true"
		type="image"
		visible="false"
		parent="thumbnailsBar-thumbnailsBar"
		targetHeight="0"
		targetWidth="0"
		zorder="2"
		onloaded="loadedImages-thumbnailsBar(arrow2);"
			url="%FIRSTXML%/graphics/thumbnailsbar/btn_scroll_right.png"
			align="right"
	/>
	
	<action name="loadedImages-thumbnailsBar">
		if(%1 == "arrow1",
			set(arrow1Loaded-thumbnailsBar, true);
		);
		if(%1 == "arrow2",
			set(arrow2Loaded-thumbnailsBar, true);
		);
		if(%1 == "border",
			if(layer[thumbnailBorderSource-thumbnailsBar].url,
				set(borderLoaded-thumbnailsBar, true);
			);
		);
		if(%1 == "thumbnail",
			inc(thumbnailsLoadedCounter-thumbnailsBar);
		);
	</action>
	
	<action name="onLoadCompleteHandler-thumbnailsBar">
		
		set(thumbsCount-thumbnailsBar, 0);
		
		
		set(thumbsCount-thumbnailsBar, get(scene.count));
		
		
		
		
		
		
		
		loadThumbs-thumbnailsBar();
		
		if(firstInit-thumbnailsBar,
			onLoadCompleteHandlerPartThree-thumbnailsBar();
		,
			onLoadCompleteHandlerPartTwo-thumbnailsBar();
		);
	</action>
	
	<action name="onLoadCompleteHandlerPartTwo-thumbnailsBar">
		set(imgCounter-thumbnailsBar, 3);
		
		if(arrow1Loaded-thumbnailsBar,
			dec(imgCounter-thumbnailsBar);
		);
		if(arrow2Loaded-thumbnailsBar,
			dec(imgCounter-thumbnailsBar);
		);
		if(thumbsCount-thumbnailsBar == thumbnailsLoadedCounter-thumbnailsBar,
			dec(imgCounter-thumbnailsBar);
		);
		
		if(imgCounter-thumbnailsBar LE 0,
			stopdelayedcall(delayedCallOnLoadComplete-thumbnailsBar);
			onLoadCompleteHandlerPartThree-thumbnailsBar();
		,
			delayedcall(delayedCallOnLoadComplete-thumbnailsBar, 0.2, onLoadCompleteHandlerPartTwo-thumbnailsBar());
		);
	</action>
	
	<action name="onLoadCompleteHandlerPartThree-thumbnailsBar">
		resetMouseBehavior-thumbnailsBar();
		highlightCurrentThumb-thumbnailsBar();
		
		
		if(layer[scrollAreaContainer-thumbnailsBar].adjustToContent,
			mul(adjustWidth-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].marginX), 2);
			add(adjustWidth-thumbnailsBar, get(layer[thumbsScrollArea-thumbnailsBar].width));
			mul(adjustHeight-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].marginY), 2);
			add(adjustHeight-thumbnailsBar, get(layer[thumbsScrollArea-thumbnailsBar].height));
			
			
			if(adjustWidth-thumbnailsBar GT stagewidth,
				set(adjustWidth-thumbnailsBar, get(stagewidth));
				set(layer[scrollAreaContainer-thumbnailsBar].adjustToContent, false);
			,
				if(adjustHeight-thumbnailsBar GT stageheight,
					set(adjustHeight-thumbnailsBar, get(stageheight));
					set(layer[scrollAreaContainer-thumbnailsBar].adjustToContent, false);
				);
			);
			
			setSize-thumbnailsBar(get(adjustWidth-thumbnailsBar), get(adjustHeight-thumbnailsBar));
		);
		
		setupArrows-thumbnailsBar(true);
		
		
		if (thumbsCounter-thumbnailsBar LE 0,
			set(layer[thumbnailsBar-thumbnailsBar].visible, false);
		);
		
		
		set(startResize-thumbnailsBar, true);
		set(firstInit-thumbnailsBar, true);
	</action>
	
	
	<action name="onResizeHandler-thumbnailsBar">
		
		delayedcall(0.1, onResizeCallback-thumbnailsBar(false); );
	</action>
	
	
	<action name="onResizeCallback-thumbnailsBar">
		if(startResize-thumbnailsBar,
			setSize-thumbnailsBar(get(layer[scrollAreaContainer-thumbnailsBar].targetWidth), get(layer[scrollAreaContainer-thumbnailsBar].targetHeight));
			setupArrows-thumbnailsBar(%1);
			
			
			if (thumbsCounter-thumbnailsBar LE 0,
				set(layer[thumbnailsBar-thumbnailsBar].visible, false);
			);
		);
	</action>
	
	
		<action name="showWithThumbnailsButton-thumbnailsBar">
			set(layer[thumbnailsBar-thumbnailsBar].visible, true);
			onResizeCallback-thumbnailsBar(true);
		</action>
		
		<action name="hideWithThumbnailsButton-thumbnailsBar">
			set(layer[thumbnailsBar-thumbnailsBar].visible, false);
		</action>
	
	
		<action name="showWithControlsBar-thumbnailsBar">
			
				if (tour_displaythumbnails,
					set(layer[thumbnailsBar-thumbnailsBar].visible, true);
					onResizeCallback-thumbnailsBar(true);
				,
					set(layer[thumbnailsBar-thumbnailsBar].visible, false);
				);
		</action>
		
		<action name="hideWithControlsBar-thumbnailsBar">
			set(layer[thumbnailsBar-thumbnailsBar].visible, false);
		</action>
	
	
	<action name="thumbnailBorderDrawInit-thumbnailsBar">
		
		set(layer[scrollAreaContainer-thumbnailsBar].offsetX, get(layer[thumbnailBorderSource-thumbnailsBar].borderWidth));
		set(layer[scrollAreaContainer-thumbnailsBar].offsetY, get(layer[thumbnailBorderSource-thumbnailsBar].borderWidth));
		
		
		mul(totalOffsetX-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].borderWidth), 2);
		mul(totalOffsetY-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].borderWidth), 2);
		
		
		if(startResize-thumbnailsBar,
			sub(layer[scrollAreaContainer-thumbnailsBar].itemWidth, get(totalOffsetX-thumbnailsBar));
			sub(layer[scrollAreaContainer-thumbnailsBar].itemHeight, get(totalOffsetY-thumbnailsBar));
		);
		
		
		set(layer[scrollAreaContainer-thumbnailsBar].thumbWidth, get(layer[scrollAreaContainer-thumbnailsBar].itemWidth));
		set(layer[scrollAreaContainer-thumbnailsBar].thumbHeight, get(layer[scrollAreaContainer-thumbnailsBar].itemHeight));
		
		add(layer[scrollAreaContainer-thumbnailsBar].itemWidth, get(totalOffsetX-thumbnailsBar));
		add(layer[scrollAreaContainer-thumbnailsBar].itemHeight, get(totalOffsetY-thumbnailsBar));
	</action>
		
	
	<action name="thumbnailBorderImageInit-thumbnailsBar">
		
		set(layer[scrollAreaContainer-thumbnailsBar].offsetX, get(layer[thumbnailBorderSource-thumbnailsBar].offsetX));
		set(layer[scrollAreaContainer-thumbnailsBar].offsetY, get(layer[thumbnailBorderSource-thumbnailsBar].offsetY));
		
		
		mul(totalOffsetX-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].offsetX), 2);
		mul(totalOffsetY-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].offsetY), 2);
		
		
		if(startResize-thumbnailsBar,
			sub(layer[scrollAreaContainer-thumbnailsBar].itemWidth, get(totalOffsetX-thumbnailsBar));
			sub(layer[scrollAreaContainer-thumbnailsBar].itemHeight, get(totalOffsetY-thumbnailsBar));
		);
		
		
		set(layer[scrollAreaContainer-thumbnailsBar].thumbWidth, get(layer[scrollAreaContainer-thumbnailsBar].itemWidth));
		set(layer[scrollAreaContainer-thumbnailsBar].thumbHeight, get(layer[scrollAreaContainer-thumbnailsBar].itemHeight));
		
		add(layer[scrollAreaContainer-thumbnailsBar].itemWidth, get(totalOffsetX-thumbnailsBar));
		add(layer[scrollAreaContainer-thumbnailsBar].itemHeight, get(totalOffsetY-thumbnailsBar));
		
		
		div(layer[thumbnailBorderSource-thumbnailsBar].quarterHeight, get(layer[thumbnailBorderSource-thumbnailsBar].height), 4);
		
		
		set(cropX-thumbnailsBar, 0);
		set(cropY-thumbnailsBar, 0);
		set(cropW-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].width));
		set(cropH-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].quarterHeight));
		txtadd(layer[thumbnailBorderSource-thumbnailsBar].cropDefault, get(cropX-thumbnailsBar), '|', get(cropY-thumbnailsBar), '|', get(cropW-thumbnailsBar), '|', get(cropH-thumbnailsBar));

		
		add(cropY-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].quarterHeight));
		txtadd(layer[thumbnailBorderSource-thumbnailsBar].cropHover, get(cropX-thumbnailsBar), '|', get(cropY-thumbnailsBar), '|', get(cropW-thumbnailsBar), '|', get(cropH-thumbnailsBar));
		
		
		add(cropY-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].quarterHeight));
		txtadd(layer[thumbnailBorderSource-thumbnailsBar].cropSelected, get(cropX-thumbnailsBar), '|', get(cropY-thumbnailsBar), '|', get(cropW-thumbnailsBar), '|', get(cropH-thumbnailsBar));
		
		
		add(cropY-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].quarterHeight));
		txtadd(layer[thumbnailBorderSource-thumbnailsBar].cropVisited, get(cropX-thumbnailsBar), '|', get(cropY-thumbnailsBar), '|', get(cropW-thumbnailsBar), '|', get(cropH-thumbnailsBar));
		
		
		set(scaleX-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].offsetX));
		set(scaleY-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].offsetY));
		sub(scaleW-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].width), get(totalOffsetX-thumbnailsBar));
		sub(scaleH-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].quarterHeight), get(totalOffsetY-thumbnailsBar));
		txtadd(layer[thumbnailBorderSource-thumbnailsBar].scale9grid, get(scaleX-thumbnailsBar), '|', get(scaleY-thumbnailsBar), '|', get(scaleW-thumbnailsBar), '|', get(scaleH-thumbnailsBar));
	</action>
	
	
	<action name="loadThumbs-thumbnailsBar">
		if(layer[thumbnailBorderSource-thumbnailsBar].url,
			set(imgCounter-thumbnailsBar, 1);
		,
			set(imgCounter-thumbnailsBar, 0);
		);
		
		if(layer[thumbnailBorderSource-thumbnailsBar].url,
			if(borderLoaded-thumbnailsBar,
				dec(imgCounter-thumbnailsBar);
			);
		);
		
		if(imgCounter-thumbnailsBar LE 0,
			stopdelayedcall(delayedCallOnLoadCompleteBorder-thumbnailsBar);
			loadThumbsPartTwo-thumbnailsBar();
		,
			delayedcall(delayedCallOnLoadCompleteBorder-thumbnailsBar, 0.2, loadThumbs-thumbnailsBar());
		);
	</action>
	
	<action name="loadThumbsPartTwo-thumbnailsBar">
		ifnot(layer[scrollAreaContainer-thumbnailsBar].ready,
			
			
			if(layer[thumbnailBorderSource-thumbnailsBar].url,
				thumbnailBorderImageInit-thumbnailsBar();
			,
				thumbnailBorderDrawInit-thumbnailsBar();
			);
			
			
			set(thumbsCounter-thumbnailsBar, 0);
			
			
			set(i-thumbnailsBar-wait,30);
			
			
				for( set(i-thumbnailsBar, 0), i-thumbnailsBar LT scene.count, inc(i-thumbnailsBar),
					if(i-thumbnailsBar-wait == i-thumbnailsBar,
						add(i-thumbnailsBar-wait,30);
						wait(0);
					);
					createThumb-thumbnailsBar(get(scene[get(i-thumbnailsBar)].name), get(scene[get(i-thumbnailsBar)].thumburl), get(i-thumbnailsBar), get(scene[get(i-thumbnailsBar)].titleid));
					inc(thumbsCounter-thumbnailsBar);
				);
			
			
			
			
			
			
			set(layer[scrollAreaContainer-thumbnailsBar].currentThumbsCount, get(thumbsCounter-thumbnailsBar));
			
			
			setSize-thumbnailsBar(get(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].width), get(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].height));
			
			
			set(layer[scrollAreaContainer-thumbnailsBar].visible, true);
			
			
				if (tour_displaycontrols,
					showWithControlsBar-thumbnailsBar();
				,
					hideWithControlsBar-thumbnailsBar();
				);
			
			
			set(layer[scrollAreaContainer-thumbnailsBar].ready, true);
		);
	</action>
	
	
	<action name="setSize-thumbnailsBar">
		
		
		set(layer[scrollAreaContainer-thumbnailsBar].targetWidth, %1);
		set(layer[scrollAreaContainer-thumbnailsBar].targetHeight, %2);
		
		
		set(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].width, %1);
		set(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].height, %2);
		layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].updatepos();
		
		
		mul(totalMarginX-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].x), 2);
		mul(totalMarginY-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].y), 2);
		
			add(totalPluginHeight-thumbnailsBar, get(totalMarginY-thumbnailsBar), get(layer[scrollAreaContainer-thumbnailsBar].itemHeight));
			
			
			
			if(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].pixelheight LT totalPluginHeight-thumbnailsBar,
				set(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].height, get(totalPluginHeight-thumbnailsBar));
			);
		
		layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].updatepos();
		
		
		sub(containerWidth-thumbnailsBar, get(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].pixelwidth), get(totalMarginX-thumbnailsBar));
		sub(containerHeight-thumbnailsBar, get(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].pixelheight), get(totalMarginY-thumbnailsBar));

		
		set(layer[scrollAreaContainer-thumbnailsBar].width, get(containerWidth-thumbnailsBar));
		set(layer[scrollAreaContainer-thumbnailsBar].height, get(containerHeight-thumbnailsBar));
		
		set(scrollAreaSize-thumbnailsBar, 0);
		
		
		mul(totalThumbsSpacer-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].currentThumbsCount), get(layer[scrollAreaContainer-thumbnailsBar].thumbSpacer));
		sub(totalThumbsSpacer-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].thumbSpacer));
		
		set(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].visible, true);
		

			mul(scrollAreaSize-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].itemWidth), get(layer[scrollAreaContainer-thumbnailsBar].currentThumbsCount));
			add(scrollAreaSize-thumbnailsBar, get(totalThumbsSpacer-thumbnailsBar));
			
			set(layer[thumbsScrollArea-thumbnailsBar].width, get(scrollAreaSize-thumbnailsBar));
			set(layer[thumbsScrollArea-thumbnailsBar].height, get(layer[scrollAreaContainer-thumbnailsBar].itemHeight));
			
			
			if(layer[scrollAreaContainer-thumbnailsBar].width LT layer[scrollAreaContainer-thumbnailsBar].itemWidth,
				set(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].visible, false);
			,
				verifyThumbnailsBarVisibility-thumbnailsBar();
			);
			
		
		
		if(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].width LT 0,
			set(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].visible, false);
		);
		
	</action>
	
	
	<action name="verifyThumbnailsBarVisibility-thumbnailsBar">
		if(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].visible,
			set(boolValue-thumbnailsBar, false);
			
			if (tour_displaythumbnails,
				if (tour_displaycontrols,
					set(boolValue-thumbnailsBar, true);
				);
			);
			
			set(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].visible, get(boolValue-thumbnailsBar));
		);
	</action>
	
	
	<action name="createThumb-thumbnailsBar">

			add(offsetFactor-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].itemWidth), get(layer[scrollAreaContainer-thumbnailsBar].thumbSpacer));
	
			mul(thumbIncPos-thumbnailsBar, %3, get(offsetFactor-thumbnailsBar));
			
			
			if(layer[thumbnailBorderSource-thumbnailsBar].url,
				add(thumbIncPos-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].offsetX));
			);
			
		
		mul(negativeOffsetX-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].offsetX), -1);
		mul(negativeOffsetY-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].offsetY), -1);
		
		set(thumbName, 'thumb_');
		txtadd(thumbName, %1);
		txtadd(thumbName, '-thumbnailsBar');
		addlayer(get(thumbName));
		
		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '-thumbnailsBar');
		addlayer(get(thumbBorderName));
		
		
		ifnot(layer[thumbnailBorderSource-thumbnailsBar].url,
			set(layer[get(thumbBorderName)].type, container);
			set(layer[get(thumbBorderName)].parent, thumbsScrollArea-thumbnailsBar);
		);
		
		
		set(layer[get(thumbName)].onloaded, loadedImages-thumbnailsBar("thumbnail"););
		set(layer[get(thumbName)].url, %2);
		set(layer[get(thumbName)].keep, true);
		set(layer[get(thumbName)].width, get(layer[scrollAreaContainer-thumbnailsBar].thumbWidth));
		set(layer[get(thumbName)].height, get(layer[scrollAreaContainer-thumbnailsBar].thumbHeight));
		set(layer[get(thumbName)].align, topleft);
		
		
			set(layer[get(thumbName)].y, get(layer[scrollAreaContainer-thumbnailsBar].offsetY));
		
			if(layer[thumbnailBorderSource-thumbnailsBar].url,
				set(layer[get(thumbName)].parent, thumbsScrollArea-thumbnailsBar);
				set(layer[get(thumbName)].x, get(thumbIncPos-thumbnailsBar));
			,
				set(layer[get(thumbName)].parent, get(thumbBorderName));
				set(layer[get(thumbName)].x, get(layer[scrollAreaContainer-thumbnailsBar].offsetX));
				set(layer[get(thumbName)].onclick, resetMouseBehavior-thumbnailsBar(); mainloadscene(%1); highlightThumb-thumbnailsBar(%1));
			);	
			
		
		
		set(layer[get(thumbBorderName)].keep, true);
		set(layer[get(thumbBorderName)].width, get(layer[scrollAreaContainer-thumbnailsBar].itemWidth));
		set(layer[get(thumbBorderName)].height, get(layer[scrollAreaContainer-thumbnailsBar].itemHeight));
		set(layer[get(thumbBorderName)].align, topleft);
		
		if(layer[thumbnailBorderSource-thumbnailsBar].url,
			set(layer[get(thumbBorderName)].url, get(layer[thumbnailBorderSource-thumbnailsBar].url));
			set(layer[get(thumbBorderName)].scale9grid, get(layer[thumbnailBorderSource-thumbnailsBar].scale9grid));
			set(layer[get(thumbBorderName)].parent, get(thumbName));
			set(layer[get(thumbBorderName)].x, get(negativeOffsetX-thumbnailsBar));
			set(layer[get(thumbBorderName)].y, get(negativeOffsetY-thumbnailsBar));
			set(layer[get(thumbBorderName)].onclick, resetMouseBehavior-thumbnailsBar(); mainloadscene(%1); highlightThumb-thumbnailsBar(%1));
		,
			
				set(layer[get(thumbBorderName)].x, get(thumbIncPos-thumbnailsBar)); 
				
		);
		
		
		setupMouseBehavior-thumbnailsBar(%1, %4);
		
	</action>
	
	
	<action name="removeThumb-thumbnailsBar">
		set(thumbName, 'thumb_');
		txtadd(thumbName, %1);
		txtadd(thumbName, '-thumbnailsBar');
		removelayer(get(thumbName));
		
		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '-thumbnailsBar');
		removelayer(get(thumbBorderName));
	</action>
	
	
	
	<action name="setupArrows-thumbnailsBar">
		
		if(layer[scrollAreaContainer-thumbnailsBar].adjustToContent,
			hideArrows-thumbnailsBar();
		,
			ifnot(device.touchdevice,
				
					if(layer[scrollAreaContainer-thumbnailsBar].width LT layer[thumbsScrollArea-thumbnailsBar].width,
				
					showArrows-thumbnailsBar();
				,
					hideArrows-thumbnailsBar();
				);
			,
				hideArrows-thumbnailsBar();
			);
		);
		
		
		if(%1,
			scrollToCurrentThumb-thumbnailsBar();
		);
		
		
			
			if(layer[scrollAreaContainer-thumbnailsBar].width LT layer[scrollAreaContainer-thumbnailsBar].itemWidth,
				set(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].visible, false);
			);
	</action>
	
	
	<action name="showArrows-thumbnailsBar">
		
		
		
		
		set(layer[scrollPrevArrow-thumbnailsBar].visible, true);
		set(layer[scrollNextArrow-thumbnailsBar].visible, true);
		
		
		
			
			add(totalArrowSize-thumbnailsBar, get(layer[scrollPrevArrow-thumbnailsBar].width), get(layer[scrollNextArrow-thumbnailsBar].width));
		
			
			sub(scrollAreaContainerSize-thumbnailsBar, get(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].pixelwidth), get(totalArrowSize-thumbnailsBar));
		
			set(layer[scrollAreaContainer-thumbnailsBar].width, get(scrollAreaContainerSize-thumbnailsBar));
			
			set(layer[scrollAreaContainer-thumbnailsBar].x, get(layer[scrollPrevArrow-thumbnailsBar].width));
			
		
		
		set(layer[scrollPrevArrow-thumbnailsBar].onhover, scrollPrev-thumbnailsBar(););
		set(layer[scrollNextArrow-thumbnailsBar].onhover, scrollNext-thumbnailsBar(););
		
		set(layer[scrollPrevArrow-thumbnailsBar].onclick, scrollPrev-thumbnailsBar(get(layer[scrollAreaContainer-thumbnailsBar].scrollSpeedAcceleration)););
		set(layer[scrollNextArrow-thumbnailsBar].onclick, scrollNext-thumbnailsBar(get(layer[scrollAreaContainer-thumbnailsBar].scrollSpeedAcceleration)););
		
		
		
		
		
		set(layer[scrollPrevArrow-thumbnailsBar].onout, set(layer[scrollAreaContainer-thumbnailsBar].scrollSpeed, get(layer[scrollAreaContainer-thumbnailsBar].scrollSpeedInit)););
		set(layer[scrollNextArrow-thumbnailsBar].onout, set(layer[scrollAreaContainer-thumbnailsBar].scrollSpeed, get(layer[scrollAreaContainer-thumbnailsBar].scrollSpeedInit)););
		
	</action>
	
	
	
	
	<action name="hideArrows-thumbnailsBar">
		
		set(layer[scrollPrevArrow-thumbnailsBar].visible, false);
		set(layer[scrollNextArrow-thumbnailsBar].visible, false);
		
		

			mul(totalMargin-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].marginX), 2);
			
			sub(scrollAreaContainerSize-thumbnailsBar, get(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].pixelwidth), get(totalMargin-thumbnailsBar));

			set(layer[scrollAreaContainer-thumbnailsBar].width, get(scrollAreaContainerSize-thumbnailsBar));
			set(layer[scrollAreaContainer-thumbnailsBar].x, get(layer[scrollAreaContainer-thumbnailsBar].marginX));
			 
			
	</action>
	
	
	<action name="scrollPrev-thumbnailsBar">
		
		
		if(%1,
			inc(layer[scrollAreaContainer-thumbnailsBar].scrollSpeed, %1);
		);
		
		layer[thumbsScrollArea-thumbnailsBar].stopscrolling();
		
		set(scrollLimit-thumbnailsBar, 0);
		
		
			
				sub(scrollLimit-thumbnailsBar, get(layer[thumbsScrollArea-thumbnailsBar].width), get(layer[scrollAreaContainer-thumbnailsBar].width));
				div(scrollLimit-thumbnailsBar, 2);
			
			add(layer[thumbsScrollArea-thumbnailsBar].x, get(layer[scrollAreaContainer-thumbnailsBar].scrollSpeed));
			if(layer[thumbsScrollArea-thumbnailsBar].x GE scrollLimit-thumbnailsBar,
				set(layer[thumbsScrollArea-thumbnailsBar].x, get(scrollLimit-thumbnailsBar));
			);
		
		if(layer[scrollAreaContainer-thumbnailsBar].scrollSpeed LT layer[scrollAreaContainer-thumbnailsBar].scrollSpeedMax,
			inc(layer[scrollAreaContainer-thumbnailsBar].scrollSpeed);
		);
		
	</action>
	
	
	<action name="scrollNext-thumbnailsBar">
		
		
		if(%1,
			inc(layer[scrollAreaContainer-thumbnailsBar].scrollSpeed, %1);
		);
		
		layer[thumbsScrollArea-thumbnailsBar].stopscrolling();
		
			
			sub(scrollLimit-thumbnailsBar, get(layer[thumbsScrollArea-thumbnailsBar].width), get(layer[scrollAreaContainer-thumbnailsBar].width));
			
				div(scrollLimit-thumbnailsBar, 2);
			mul(scrollLimit-thumbnailsBar, -1);
			
			sub(layer[thumbsScrollArea-thumbnailsBar].x, get(layer[scrollAreaContainer-thumbnailsBar].scrollSpeed));
			if(layer[thumbsScrollArea-thumbnailsBar].x LE scrollLimit-thumbnailsBar,
				set(layer[thumbsScrollArea-thumbnailsBar].x, get(scrollLimit-thumbnailsBar));
			);
		
		if(layer[scrollAreaContainer-thumbnailsBar].scrollSpeed LT layer[scrollAreaContainer-thumbnailsBar].scrollSpeedMax,
			inc(layer[scrollAreaContainer-thumbnailsBar].scrollSpeed);
		);
		
	</action>
	
	
	<action name="resetMouseBehavior-thumbnailsBar">
	
		
		
		
		set(j-thumbnailsBar-wait,30);
		
			for( set(j-thumbnailsBar, 0), j-thumbnailsBar LT scene.count, inc(j-thumbnailsBar),
				if(j-thumbnailsBar-wait == j-thumbnailsBar,
					add(j-thumbnailsBar-wait,30);
					wait(0);
				);
				set(thumbBorderName, 'thumbBorder_');
				txtadd(thumbBorderName, get(scene[get(j-thumbnailsBar)].name));
				txtadd(thumbBorderName, '-thumbnailsBar');
				
				setupMouseBehavior-thumbnailsBar(get(scene[get(j-thumbnailsBar)].name), get(scene[get(j-thumbnailsBar)].titleid));
			);
		
	</action>
	
	
	<action name="setupMouseBehavior-thumbnailsBar">

		set(thumbName, 'thumb_');
		txtadd(thumbName, %1);
		txtadd(thumbName, '-thumbnailsBar');
		
		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '-thumbnailsBar');
		
		if(layer[thumbnailBorderSource-thumbnailsBar].url,
			set(layer[get(thumbBorderName)].crop, get(layer[thumbnailBorderSource-thumbnailsBar].cropDefault));
			set(layer[get(thumbBorderName)].onovercrop, get(layer[thumbnailBorderSource-thumbnailsBar].cropHover));
			set(layer[get(thumbBorderName)].ondowncrop, get(layer[thumbnailBorderSource-thumbnailsBar].cropHover));
			set(layer[get(thumbBorderName)].tooltip, %2);
				set(layer[get(thumbBorderName)].onhover, showTooltip('plugin', ));
				set(layer[get(thumbBorderName)].onout, hideTooltip());
		,
			set(layer[get(thumbBorderName)].bgcolor, get(layer[thumbnailBorderSource-thumbnailsBar].borderColorDefault));
			set(layer[get(thumbBorderName)].bgalpha, get(layer[thumbnailBorderSource-thumbnailsBar].borderAlphaDefault));
				set(layer[get(thumbName)].tooltip, %2);
				set(layer[get(thumbName)].onhover, showTooltip('plugin', ));
			
			set(layer[get(thumbName)].onover, 
				set(layer[get(parent)].bgcolor, get(layer[thumbnailBorderSource-thumbnailsBar].borderColorHover));
				set(layer[get(parent)].bgalpha, get(layer[thumbnailBorderSource-thumbnailsBar].borderAlphaHover));
			);
			
			set(layer[get(thumbName)].onout, 
				set(layer[get(parent)].bgcolor, get(layer[thumbnailBorderSource-thumbnailsBar].borderColorDefault));
				set(layer[get(parent)].bgalpha, get(layer[thumbnailBorderSource-thumbnailsBar].borderAlphaDefault));
				hideTooltip();
			);
		);
	
	</action>
	
	
	<action name="highlightCurrentThumb-thumbnailsBar">
			highlightThumb-thumbnailsBar(get(xml.scene));
	</action>
	
	
	<action name="highlightThumb-thumbnailsBar">
	
		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '-thumbnailsBar');
		
		if(layer[thumbnailBorderSource-thumbnailsBar].url,
			set(layer[get(thumbBorderName)].crop, get(layer[thumbnailBorderSource-thumbnailsBar].cropSelected));
			set(layer[get(thumbBorderName)].onovercrop, get(layer[thumbnailBorderSource-thumbnailsBar].cropSelected));
			set(layer[get(thumbBorderName)].ondowncrop, get(layer[thumbnailBorderSource-thumbnailsBar].cropSelected));
		,
			set(thumbName, 'thumb_');
			txtadd(thumbName, %1);
			txtadd(thumbName, '-thumbnailsBar');
			
			set(layer[get(thumbBorderName)].bgcolor, get(layer[thumbnailBorderSource-thumbnailsBar].borderColorSelected));
			set(layer[get(thumbBorderName)].bgalpha, get(layer[thumbnailBorderSource-thumbnailsBar].borderAlphaSelected));
			
			set(layer[get(thumbName)].onover, "");
			set(layer[get(thumbName)].onout, hideTooltip(););
		);

		scrollToThumb-thumbnailsBar(%1);
	</action>
	
	
	<action name="scrollToCurrentThumb-thumbnailsBar">
			scrollToThumb-thumbnailsBar(get(xml.scene));
	</action>
	
	
	<action name="scrollToThumb-thumbnailsBar">
		
		set(thumbName, 'thumb_');
		set(thumbBorderName, 'thumbBorder_');
		
		txtadd(thumbName, %1);
		txtadd(thumbName, '-thumbnailsBar');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '-thumbnailsBar');

			set(posX-thumbnailsBar, 0);
			if(layer[thumbnailBorderSource-thumbnailsBar].url,
				div(halfThumbWidth-thumbnailsBar, get(layer[get(thumbName)].width), 2);
				ifnot(layer[scrollAreaContainer-thumbnailsBar].adjustToContent,
					add(posX-thumbnailsBar, get(layer[get(thumbName)].x), get(halfThumbWidth-thumbnailsBar));
				);
				if(layer[thumbsScrollArea-thumbnailsBar].scrolltocenter,
					layer[thumbsScrollArea-thumbnailsBar].scrolltocenter(get(posX-thumbnailsBar), 0);
				);
			,
				div(halfThumbWidth-thumbnailsBar, get(layer[get(thumbBorderName)].width), 2);
				ifnot(layer[scrollAreaContainer-thumbnailsBar].adjustToContent,
					add(posX-thumbnailsBar, get(layer[get(thumbBorderName)].x), get(halfThumbWidth-thumbnailsBar));
				);
				if(layer[thumbsScrollArea-thumbnailsBar].scrolltocenter,
					layer[thumbsScrollArea-thumbnailsBar].scrolltocenter(get(posX-thumbnailsBar), 0);
				);
			);
		
	</action>
	





  <!-- ************************************************** -->
  <!-- Toggle Button : topright -->
  <!-- ************************************************** -->



  <layer name="togglebutton1"
         keep="true"
         url="%FIRSTXML%/graphics/togglebutton1/fullscreen_mobile_1b.png" 
         align="topright"
         x="14"
         y="19"
         zorder="1"
         state="true"
         onclick="togglebutton1OnClick"
         onout=""
         visible="false"
         />

  <action name="togglebutton1OnClick">
    if (state,
      set(state, false);enterFullscreen();


      set(url,%FIRSTXML%/graphics/togglebutton1/fullscreen_mobile_2b.png);
     ,
      set(state, true);exitFullscreen();


      set(url,%FIRSTXML%/graphics/togglebutton1/fullscreen_mobile_1b.png);
    );
  </action>

  <events name="togglebutton1events" 
    onTourStart="showtogglebutton1();"
    hidetourcontrols="hidetogglebutton1();" 
    showtourcontrols="showtogglebutton1();" 
    keep="true" />
  <action name="hidetogglebutton1">set(layer[togglebutton1].visible, false);</action>
  <action name="showtogglebutton1">set(layer[togglebutton1].visible, true);</action>



  <!-- ******************************************* -->
  <!-- Button : topleft -->
  <!-- ******************************************* -->
<!--
  <layer name="button1"
         keep="true"
         url="%FIRSTXML%/graphics/button1/logo_mobile.png" 
         align="topleft"
         x="12"
         y="18"
         zorder="2"
         visible="false"
         handcursor="false"
         enabled="false"
         />

  <events name="button1events" 
    onTourStart="showbutton1();"
    hidetourcontrols="hidebutton1();" 
    showtourcontrols="showbutton1();" 
    keep="true" />
  <action name="hidebutton1">set(layer[button1].visible, false);</action>
  <action name="showbutton1">set(layer[button1].visible, true);</action>

-->

<!-- ************ -->
<!-- Context Menu -->
<!-- ************ -->
  <contextmenu fullscreen="false" versioninfo="false" touch="true">
    <item name="author" onclick="getmessage(urltoopen,project_author_url);openurl(get(urltoopen),_blank);" />
  </contextmenu>

  <events name="contextmenuevents" keep="true" onenterfullscreen="updateContextMenu" onexitfullscreen="updateContextMenu" onxmlcomplete="updateContextMenu"/>
  <action name="updateContextMenu">
    getmessage(contextmenu.item[author].caption, project_author_name);
  </action>


  <!-- Fullscreen Management -->
  <action name="exitFullScreen" devices="fullscreensupport">set(tour_fullscreen,false);set(fullscreen,false);</action>
  <action name="enterFullScreen" devices="fullscreensupport">set(tour_fullscreen,true);set(fullscreen,true);</action>
  <action name="switchFullScreen">if(tour_fullscreen,exitFullScreen();,enterFullScreen(););</action>

  
  <events name="krpanoExitFullscreenEvent"
    onexitfullscreen="if(tour_fullscreen,exitFullScreenChangeEvent(););"
    keep="true" />

  <action name="exitFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,false);events.dispatch(onexitfullscreen);</action>

</krpano>